<?xml version="1.0"?>

<!--
	Build file for Objectify.
-->

<project name="objectify" default="jar" basedir="."
	xmlns:artifact="antlib:org.apache.maven.artifact.ant"
	xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="name" value="${ant.project.name}" />
	
	<property file="user.properties" />
	<property file="${user.home}/build.properties" />
	<property file="build.properties" />

	<property name="build.debug" value="on" />
	<property name="build.deprecation" value="on" />

	<property name="ant.build.javac.target" value="1.6" />
	<property name="ant.build.javac.source" value="1.6" />

	<property name="build.dir" location="target" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.super.dir" location="${build.dir}/super" />
	<property name="build.javadoc.dir" location="${build.dir}/javadoc" />
	<property name="build.extract.dir" location="${build.dir}/extract" />
	<property name="build.meta.dir" location="${build.dir}/META-INF" />

	<property name="docs.dir" value="${build.dir}/docs" />
	<property name="javadoc.dir" value="javadoc" />

	<property name="super.package" value="com/googlecode/objectify/impl/emul"/>

	<property name="googlecode.projectname" value="objectify-appengine"/>

	<property name="src.dir" location="src" />
	<property name="super.src.dir" location="super" />
	
	<property name="ecj.jar" location="${lib.dir}/build-only/ecj-3.7.1.jar" />
    <property name="ecj.prefs" value=".settings/org.eclipse.jdt.core.prefs" />
	
	<patternset id="sdk.client.files">
		<!-- Datastore data classes -->
		<include name="com/google/appengine/api/datastore/AppIdNamespace.class"/>
		<include name="com/google/appengine/api/datastore/Blob.class"/>
		<include name="com/google/appengine/api/datastore/Category.class"/>
		<include name="com/google/appengine/api/datastore/Cursor.class"/>
		<include name="com/google/appengine/api/datastore/DataTypeUtils.class"/>
		<include name="com/google/appengine/api/datastore/Email.class"/>
		<include name="com/google/appengine/api/datastore/EntityNotFoundException.class"/>
		<include name="com/google/appengine/api/datastore/GeoPt.class"/>
		<include name="com/google/appengine/api/datastore/IMHandle.class"/>
		<include name="com/google/appengine/api/datastore/Key.class"/>
		<include name="com/google/appengine/api/datastore/KeyFactory.class"/>
		<include name="com/google/appengine/api/datastore/Link.class"/>
		<include name="com/google/appengine/api/datastore/PhoneNumber.class"/>
		<include name="com/google/appengine/api/datastore/PostalAddress.class"/>
		<include name="com/google/appengine/api/datastore/Rating.class"/>
		<include name="com/google/appengine/api/datastore/ShortBlob.class"/>
		<include name="com/google/appengine/api/datastore/Text.class"/>
		<include name="com/google/appengine/api/users/User.class"/>
	</patternset>
	
	<patternset id="objectify.client.files">
		<include name="com/googlecode/objectify/Key.class"/>
		<include name="com/googlecode/objectify/KeyRange.class"/>
		<include name="com/googlecode/objectify/NotFoundException.class"/>
		<include name="com/googlecode/objectify/Ref.class"/>
		<include name="com/googlecode/objectify/annotation/**/*.class"/>
		<include name="com/googlecode/objectify/condition/**/*.class"/>
		<include name="com/googlecode/objectify/impl/TypeUtils.class"/>
	</patternset>

	<!-- We get our path from ivy -->
	<ivy:cachepath pathid="master.classpath" />

	<!-- Used for running unit tests via ant -->
	<path id="run.classpath">
		<pathelement location="${build.classes.dir}" />
		<path refid="master.classpath" />
	</path>

	<target name="init">
		<tstamp>
			<format property="YEAR" pattern="yyyy" />
		</tstamp>

        <property name="revision" value="SNAPSHOT" />
		
        <property name="artifactname" value="${name}-${revision}" />
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>
	
 	<target name="classes" depends="init">
		<mkdir dir="${build.classes.dir}" />
 		
		<javac srcdir="${src.dir}"
				destdir="${build.classes.dir}"
				debug="${build.debug}"
				deprecation="${build.deprecation}"
				includeantruntime="true"
    	        compiler="org.eclipse.jdt.core.JDTCompilerAdapter">
            <compilerclasspath refid="master.classpath" />
            <compilerarg line="-warn:-serial,+null,+semicolon,-raw,-javadoc -time -enableJavadoc -properties ${ecj.prefs}" />
			<classpath refid="master.classpath" />
		</javac>

		<mkdir dir="${build.super.dir}" />

		<javac srcdir="${super.src.dir}"
				destdir="${build.super.dir}"
				debug="${build.debug}"
				deprecation="${build.deprecation}"
				includeantruntime="true"
	            compiler="org.eclipse.jdt.core.JDTCompilerAdapter">
            <compilerclasspath refid="master.classpath" />
            <compilerarg line="-warn:-serial,+null,+semicolon,-raw,-javadoc -time -enableJavadoc -properties ${ecj.prefs}" />
		</javac>
	</target>
	
	<target name="pom" depends="classes">
		<property name="build.pom.file" location="${build.dir}/${artifactname}.pom" />
			
		<!-- the ivy.xml file needs to be the built one -->
		<ivy:makepom ivyfile="${basedir}/ivy.xml" pomfile="${build.pom.file}">
			<mapping conf="default" scope="compile"/>
			<mapping conf="runtime" scope="runtime"/>
		</ivy:makepom>
		
		<copy file="${build.pom.file}" todir="${build.meta.dir}/maven/com.googlecode.objectify/objectify/pom.xml" />
	</target>

	<target name="jar" depends="pom">
		<property name="build.jar.file" location="${build.dir}/${artifactname}.jar" />

		<jar destfile="${build.jar.file}">
			<manifest>
				<attribute name="Specification-Version" value="${revision}" />
				<attribute name="Implementation-Version" value="${TODAY}" />
			</manifest>
			
			<metainf dir="${build.meta.dir}" />
			
			<fileset dir="${build.classes.dir}" />
			
			<fileset dir="${src.dir}">
				<include name="**/*.gwt.xml"/>
				<!-- <include name="**/Key.java"/> -->
				<include name="**/NotFoundException.java" />
			</fileset>

			<zipfileset dir="${super.src.dir}" prefix="${super.package}">
				<include name="**/*.java"/>
			</zipfileset>
			<zipfileset dir="${src.dir}" prefix="${super.package}">
				<include name="**/*_CustomFieldSerializer.java"/>
			</zipfileset>
		</jar>
	</target>

	<target name="sources" depends="init">
		<property name="build.sources.file" location="${build.dir}/${artifactname}-sources.jar" />

		<jar zipfile="${build.sources.file}">
			<fileset dir="${src.dir}" includes="**/*.java"/>
		</jar>
	</target>

	<target name="javadoc" depends="classes">
		<property name="build.javadoc.file" location="${build.dir}/${artifactname}-javadoc.jar" />
		
		<javadoc
			destdir="${build.javadoc.dir}"
			packagenames="*"
			classpathref="run.classpath"
			author="true"
			version="true"
			Windowtitle="Objectify App Engine Javadoc">
			
			<fileset dir="${src.dir}">
				<include name="**/com/googlecode/objectify/**/*.java" />
			</fileset>
			
			<doctitle><![CDATA[<h1>Objectify App Engine</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; ${YEAR} Jeff Schnitzer and a gang of pirates. All Rights Reserved. Build version: ${revision}</i>]]></bottom>
		</javadoc>

		<jar zipfile="${build.javadoc.file}">
			<fileset dir="${build.javadoc.dir}" />
		</jar>
	</target>
	
	<target name="client-jar" depends="classes">
		<property name="build.client-jar.file" location="${build.dir}/${name}-client-${revision}.jar" />

		<unjar dest="${build.extract.dir}">
			<patternset refid="sdk.client.files"/>
			<path refid="master.classpath" />
		</unjar>
		
		<jar destfile="${build.client-jar.file}">
			<manifest>
				<attribute name="Specification-Version" value="${revision}" />
				<attribute name="Implementation-Version" value="${TODAY}" />
			</manifest>
			
			<fileset dir="${build.classes.dir}">
				<patternset refid="objectify.client.files"/>
			</fileset>
			<fileset dir="${build.extract.dir}"/>
		</jar>
	</target>
	
	<target name="signjars" depends="jar, sources, javadoc">
		<signjar jar="${build.jar.file}" alias="objectify" keystore="../objectify.keystore" storepass="notsecret"/>
		<signjar jar="${build.sources.file}" alias="objectify" keystore="../objectify.keystore" storepass="notsecret"/>
		<signjar jar="${build.javadoc.file}" alias="objectify" keystore="../objectify.keystore" storepass="notsecret"/>
	</target>

	<target name="publish" depends="jar, sources, javadoc"> 
		<ivy:publish
			artifactspattern="${build.dir}/[artifact]-[revision](-[classifier]).[ext]" 
			resolver="local"
			pubrevision="${revision}" 
			status="release"
			overwrite="true"/>
	</target>
	
	<target name="init-version">
		<input addproperty="revision" message="Version number?" />
	</target>

	<target name="syncjavadoc" depends="init-version, javadoc">
		<sync todir="${javadoc.dir}" includeEmptyDirs="true">
			<fileset dir="${build.javadoc.dir}" />
		</sync>
	</target>
	
	<target name="dist" depends="clean, init-version, jar, build-docs">
		<property name="build.dist.dir" location="${build.dir}/${ant.project.name}-${revision}"/>
		<property name="build.dist.zip" location="${build.dir}/${ant.project.name}-${revision}.zip"/>
		
		<copy todir="${build.dist.dir}">
			<fileset dir=".">
				<include name="license.txt"/>
				<include name="javadoc/**"/>
			</fileset>
		</copy>
		
		<copy todir="${build.dist.dir}">
			<fileset dir="${build.dir}">
				<include name="docs/**" />
				<include name="*.jar" />
			</fileset>
		</copy>
		
		<dirname property="build.dist.dir.dirname" file="${build.dist.dir}" />
		<basename property="build.dist.dir.basename" file="${build.dist.dir}" />
		
		<zip zipfile="${build.dist.zip}" basedir="${build.dist.dir.dirname}">
			<include name="${build.dist.dir.basename}/**" />
		</zip>
	</target>

	<target name="build-docs" description="downloads docs from wiki and processes them into the build/docs dir">
		<property name="wiki.baseurl" value="http://code.google.com/p/${googlecode.projectname}/wiki"/>
				
		<mkdir dir="${docs.dir}"/>
		
		<!--<svn><ls repository="http://${googlecode.projectname}.googlecode.com/svn" path="wiki" filterType="file" filterContains=".wiki"/></svn>
		<propertyregex property="wiki.pages" input="${svn.ls}" regexp="\.wiki" replace=""/> 
		<echo message="Getting wiki pages: ${wiki.pages}"/>-->
		
		<!-- Get files from wiki-->
		<for list="${wiki.pages}" param="wiki.page" parallel="yes">
		  <sequential>
			<get dest="${docs.dir}/@{wiki.page}.html" src="${wiki.baseurl}/@{wiki.page}?show=content"/>
		  </sequential>
		</for>
		
		<!-- Replace links in files -->
		<for list="${wiki.pages}" param="wiki.page">
		  <sequential>
		  	<echo message="replacing /p/${googlecode.projectname}/wiki/@{wiki.page} with @{wiki.page}.html in ${docs.dir}"/>
			<replace dir="${docs.dir}" token="/p/${googlecode.projectname}/wiki/@{wiki.page}" value="@{wiki.page}.html"/>
		  </sequential>
		</for>
		
		<!-- link back to the wiki, if we haven't downloaded the content -->
		<replace dir="${docs.dir}" token="/p/${googlecode.projectname}/wiki" value="${wiki.baseurl}"/>
		
	</target>

	<!--
	Using either "ant dist" or "ant maven" will deploy the maven artifacts to maven.repo.dir.
	If you don't set maven.repo.dir then ../maven is used if it exists, otherwise ./target/maven is used
	-->
	<target name="mavencentral" depends="dist"
	        description="Uploads dist jar to maven central">

		<ivy:publish
			publishivy="false"
			artifactspattern="${build.javarepository}/[organisation]/[module]/[artifact]/[revision]/[artifact]-[revision](-[classifier]).[ext]"
			resolver="nexus"/>
	</target>
</project>
